{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8ed38d67_24ca2a8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2022-12-19T15:03:21Z",
      "side": 1,
      "message": "One example of a scenario to consider here (not making a judgment about it, myself):\n1. User has non-persistent MAC address randomization enabled (safer/safest/whatever).\n2. User is connected to flaky hotel Wi-Fi and trying to participate in a meeting.\n3. After some tweaking, everything seems to be going fine.\n4. User randomly (unrelated to this change) gets disconnected after 30 minutes or so but is automatically reconnected.\n\n* New behavior: User will have a new MAC address and need to deal with the captive portal again, delaying their re-entry to the meeting.\n* Old behavior: User will have the same MAC address and possibly not need to deal with the captive portal again, so they are able to re-join their meeting more quickly, unless their MAC address was last changed more than 24 hours ago.",
      "revId": "78259bbafcc7691f48bab79918eebfb78e212866",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "effec51a_05099af9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-19T18:28:14Z",
      "side": 1,
      "message": "1. For now we\u0027re just leaving it as an option. It won\u0027t be default. It could be tied in with garlic level potentially, but for now I don\u0027t think so.\n\nThus, I don\u0027t think this scenario is an issue. In fact, this is exactly one of the reasons it won\u0027t be default, but it\u0027s still nice to have it as an option, especially when like this it\u0027s not too many lines of code.",
      "parentUuid": "8ed38d67_24ca2a8d",
      "revId": "78259bbafcc7691f48bab79918eebfb78e212866",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5e25e6f_82b84ce3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-19T18:28:14Z",
      "side": 1,
      "message": "Also, could you try:\n\n`atest WifiConfigManagerTest`\n\nOr specifically `testUpdateRandomizedMacExpireTime` in there, I think\n\n`atest com.android.server.wifi#testUpdateRandomizedMacExpireTime` should do",
      "revId": "78259bbafcc7691f48bab79918eebfb78e212866",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef2bdf75_9bd1e5f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2022-12-19T19:44:48Z",
      "side": 1,
      "message": "It fails, unfortunately, in multiple tests:\n- `com.android.server.wifi.WifiConfigManagerTest#testRandomizedMacExpirationTimeUpdatedAtDisconnect`: not sure why yet\n- `com.android.server.wifi.WifiConfigManagerTest#testRandomizedMacIsNotUpdatedDueToTimeConstraint`: not sure why yet\n- `com.android.server.wifi.WifiConfigManagerTest#testNonPersistentMacRandomizationEvery24Hours`: an obvious failure, since it hard-codes 24 hours for the test.\n- `com.android.server.wifi.WifiConfigManagerTest#testUpdateRandomizedMacExpireTime`: looks like this might expect at least a 5000ms difference between min and max.\n\nIf I change this to 31 minutes, just to test, it only fixes `testUpdateRandomizedMacExpireTime`.",
      "parentUuid": "f5e25e6f_82b84ce3",
      "revId": "78259bbafcc7691f48bab79918eebfb78e212866",
      "serverId": "35266860-6252-469c-a67d-185064479fc0"
    }
  ]
}